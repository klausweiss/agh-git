#!/bin/sh
#
# MIT License
#
# Copyright (c) 2017 Mikolaj Biel
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


#=== FUNCTION ======================================================
# NAME: show_help
# DESC: Dispatch help function
#   $1: [COMMAND] to show option for
#===================================================================
show_help() {
    if [ $# = 0 ]; then
        show_general_help
        exit 0
    fi
    case $1 in
        ls|list)
            show_list_help
            ;;
        rm|delete)
            show_delete_help
            ;;
        init)
            show_init_help
            ;;
        init-server)
            show_init_server_help
            ;;
        *)
            show_general_help
            exit 1
            ;;
    esac
}

#=== FUNCTION ======================================================
# NAME: show_general_help
# DESC: Show general help message
#===================================================================
show_general_help() {

    echo "\
Usage: $0 user@hostname COMMAND [OPTION]
    or $0 --help [COMMAND]

List of available commands:
     list, ls       List repository from the server
     delete, rm     Delete repository from the server
     init           Init git repository on the server
     init-server    Init git-related directories and files on the server"
}

#=== FUNCTION ======================================================
# NAME: show_list_help
# DESC: Show list help message
#===================================================================
show_list_help() {

    echo "\
Usage: $0 user@hostname list

List user's repositories"
}

#=== FUNCTION ======================================================
# NAME: show_delete_help
# DESC: Show delete help message
#===================================================================
show_delete_help() {

    echo "\
Usage: $0 user@hostname delete REPOSITORY_NAME

Delete git repository on the server"
}

#=== FUNCTION ======================================================
# NAME: show_init_server_help
# DESC: Show init-server help message
#===================================================================
show_init_server_help() {

    echo "\
Usage: $0 user@hostname init-server

Init git-related directories and files on the server"
}

#=== FUNCTION ======================================================
# NAME: show_init_help
# DESC: Show init help message
#===================================================================
show_init_help() {

    echo "\
Usage: $0 user@hostname init REPOSITORY_NAME

Init git repository on the server" 
}


#=== FUNCTION ======================================================
# NAME: init_server
# DESC: Init git-related directories and files on the server
#   $1: remote username
#   $2: remote server
#===================================================================
init_server() {

HTACCESS="\
# index files order
DirectoryIndex index.py index.php index.html index.htm

# git
SetEnv GIT_PROJECT_ROOT ~/git
SetEnv GIT_HTTP_EXPORT_ALL

RewriteEngine  on
RewriteBase /~$1/
RewriteRule ^git/(([a-zA-Z0-9._-]*.git/(HEAD|info/refs|objects/(info/[^/]+|[0-9a-f]{2}/[0-9a-f]{38}|pack/pack-[0-9a-f]{40}.(pack|idx))|git-(upload|receive)-pack)))$ __git/git.cgi/\\\$1
RewriteRule ^git/?$ __git/
RewriteRule ^git/(([a-zA-Z0-9._-]+/?)+)$ __git/repository_info.py

# python cgi
AddHandler cgi-script .py\
"

GIT_HTACCESS="\
IndexIgnore *\
"

GIT_CGI="\
#!/bin/sh

PATH_TRANSLATED=~/git/\\\${PATH_TRANSLATED:24}

PATH=~/git/:\\\$PATH
git http-backend \\\"\\\$@\\\"\
"

WEBAPP_CSS="
body {
    margin: 20px auto;
    max-width: 650px;
    line-height: 1.6;
    font-size: 18px;
    color: #587188;
    padding: 0 10px;
}

* {
    font-family: monospace;
}

ul, li {
    margin: 0;
    padding: 0;
}

li {
    display: block;
    list-style: none;
    background-color: #ebf2fa;
    padding: 1em;
    margin-bottom: .4em;
}

li span {
    display: inline-block;
    width: 3em;
}

li input {
    font-size: 16px;
    padding: 2px;
    width: calc(100% - 4.5em);
}

h2 {
    margin: 0;
    padding: 0;
}

li > div:first-of-type {
   margin-bottom: 2px;
}

footer {
    font-size: .7em;
    text-align: right;
}

a {
    color: #587188;
}

a:hover {
    color: #2e3a46;
}
"

WEBAPP_INDEX="\
#!/usr/bin/python
import os

def get_ssh_link(name):
    return 'ssh://$1@$2/~/git/%s.git' % name

def get_http_link(name):
    return 'http://$2/~$1/git/%s.git' % name

def print_header():
    print '''
    <html><head>
    <title>$1's git repositories</title>
    <style>$WEBAPP_CSS</style>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    </head><body><ul>
    '''

def print_repository(dir_name):
    name = dir_name[:-4]
    print '''
    <li>
        <h2>%s</h2>
        <div><span>ssh:</span> <input value='%s' readonly=true onClick='this.select();' /></div>
        <div><span>http:</span> <input value='%s' readonly=true onClick='this.select();' /></div>
    </li>
    ''' % (name, get_ssh_link(name), get_http_link(name))

def print_empty():
    print '''
    <li>
        <h2>there are no repositories ):</h2>
        <div>init one!</div>
    </li>
    '''

def print_footer():
    print '''
    </ul>
    <footer>powered by <a href='https://github.com/klausweiss/agh-git/'>agh-git</a></footer>
    </body>
    </html>
    '''

home = os.path.expanduser('~')
repositories = [dir for dir
                in next(os.walk('%s/git' % home))[1]
                if dir.endswith('.git')]

print 'Content-type: text/html\n\n'
print_header()
for repo in sorted(repositories, key=lambda dir: os.stat(dir).st_mtime, reverse=True):
    print_repository(repo)
if not repositories:
    print_empty()
print_footer()
"

WEBAPP_REPO="\
#!/usr/bin/python
import os

def get_ssh_link(name):
    return 'ssh://$1@$2/~/git/%s.git' % name

def get_http_link(name):
    return 'http://$2/~$1/git/%s.git' % name

def print_header():
    print '''
    <html><head>
    <title>[REPOSITORY_NAME] @ $1's git</title>
    <style>$WEBAPP_CSS</style>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    </head><body>
    '''

def print_footer():
    print '''
    <footer>powered by <a href='https://github.com/klausweiss/agh-git/'>agh-git</a></footer>
    </body>
    </html>
    '''

request_uri = os.environ.get('REQUEST_URI')
print 'Content-type: text/html\n\n'
print_header()
print 'Request uri: %s' % request_uri
print_footer()
"

ssh -T $1@$2 <<xx029EndOfInput
    echo "$HTACCESS" > ~/public_html/.htaccess
    mkdir -p ~/public_html/__git
    ln -sf -T ~/public_html/__git/ ~/git
    echo "$WEBAPP_INDEX" > ~/git/index.py
    echo "$WEBAPP_REPO" > ~/git/repository_info.py
    echo "$GIT_CGI" > ~/git/git.cgi
    chmod 755 ~/git/index.py ~/git/git.cgi ~/git/repository_info.py
    echo "$GIT_HTACCESS" > ~/git/.htaccess
xx029EndOfInput
}


#=== FUNCTION ======================================================
# NAME: init_repo
# DESC: Init git repository on the server
#   $1: repository name
#   $2: remote username
#   $3: remote server
#===================================================================
init_repo() {
    ssh -T $2@$3 <<xx029EndOfInput
    git init --bare ~/git/$1.git > /dev/null
xx029EndOfInput
    echo "ssh:  ssh://$2@$3/~/git/$1.git"
    echo "http: http://$3/~$2/git/$1.git"
}

#=== FUNCTION ======================================================
# NAME: list_repositories
# DESC: List user's repositories
#   $1: remote username
#   $2: remote server
#===================================================================
list_repositories() {
    ssh -T $1@$2 <<xx029EndOfInput
    find ~/git/ -maxdepth 1 -name "*.git" -type d -printf "%f\n" | sed 's/.git$//' | sed 's/.*/\0:\n\tssh:  ssh:\/\/$1@$2\/~\/git\/\0.git\n\thttp: http:\/\/$2\/~$1\/git\/\0.git/'
xx029EndOfInput
}

#=== FUNCTION ======================================================
# NAME: delete_repo
# DESC: Delete git repository on the server
#   $1: repository name
#   $2: remote username
#   $3: remote server
#===================================================================
delete_repo() {
    ssh -T $2@$3 <<xx029EndOfInput
    rm -r ~/git/$1.git
xx029EndOfInput
}

#=== FUNCTION ======================================================
# NAME: handle_list
# DESC: Handles list command
#   $1: remote username
#   $2: remote server
#  $3+: additional OPTIONS
#===================================================================
handle_list() {
    if [ ! $# = 2 ]; then
        show_list_help
        exit 1
    fi
    list_repositories $1 $2
}

#=== FUNCTION ======================================================
# NAME: handle_delete
# DESC: Handles delete command
#   $1: remote username
#   $2: remote server
#  $3+: additional OPTIONS
#===================================================================
handle_delete() {
    if [ $# -lt 3 ]; then
        show_init_help
        exit 1
    fi
    delete_repo $3 $1 $2
}

#=== FUNCTION ======================================================
# NAME: handle_init
# DESC: Handles init command
#   $1: remote username
#   $2: remote server
#  $3+: additional OPTIONS
#===================================================================
handle_init() {
    if [ $# -lt 3 ]; then
        show_init_help
        exit 1
    fi

    init_repo $3 $1 $2
}

#=== FUNCTION ======================================================
# NAME: handle_init_server
# DESC: Handles init-server command
#   $1: remote username
#   $2: remote server
#  $3+: additional OPTIONS
#===================================================================
handle_init_server() {
    if [ ! $# = 2 ]; then
        show_init_server_help
        exit 1
    fi
    init_server $1 $2
}

#=== FUNCTION ======================================================
# NAME: handle_command
# DESC: Handles all commands
#   $1: remote username
#   $2: remote server
#   $3: command
#  $4+: additional OPTIONS
#===================================================================
handle_command() {
    if [ $# -lt 3 ]; then
        show_general_help
        exit 1
    fi
    USER=$1
    HOST=$2
    COMMAND=$3
    shift; shift; shift

    case $COMMAND in
        ls|list)
            handle_list $USER $HOST $@
            ;;
        rm|delete)
            handle_delete $USER $HOST $@
            ;;
        init)
            handle_init $USER $HOST $@
            ;;
        init-server)
            handle_init_server $USER $HOST $@
            ;;
        *)
            show_general_help
            exit 1
    esac
}


COMMAND=$1
case $COMMAND in
    --help)
        shift
        show_help $@
        exit 0
        ;;
    *)
        if [ $# -lt 1 ]; then
            show_general_help
            exit 1
        fi
        IFS="@" read USER HOST <<EOF
$1
EOF
        shift
        if [ ! $USER ] || [ ! $HOST ]; then
            show_general_help
            exit 1
        fi
        handle_command $USER $HOST $@
        exit 0
        ;;
esac
